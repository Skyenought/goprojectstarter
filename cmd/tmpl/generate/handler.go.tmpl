package handler

import (
	"{{.ProjectModule}}/internal/model"
	"{{.ProjectModule}}/internal/service"
	"github.com/gofiber/fiber/v3"
)

// {{.EntityName}}Handler 封装了与 {{.EntityName}} 实体相关的 HTTP 处理器
type {{.EntityName}}Handler struct {
	service service.{{.EntityName}}Service
}

// New{{.EntityName}}Handler 创建一个新的 {{.EntityName}} 处理器
func New{{.EntityName}}Handler(s service.{{.EntityName}}Service) *{{.EntityName}}Handler {
	return &{{.EntityName}}Handler{service: s}
}

// Create 处理创建新 {{.EntityName}} 的请求
// @Summary      创建 {{.EntityName}}
// @Description  根据请求体创建一个新的 {{.EntityName}} 记录
// @Tags         {{.EntityName}}
// @Accept       json
// @Produce      json
// @Param        request body model.Create{{.EntityName}}Request true "创建请求"
// @Success      201  {object}  model.{{.EntityName}}Response
// @Failure      400  {object}  map[string]string
// @Failure      500  {object}  map[string]string
// @Router       /{{.TableName}} [post]
func (h *{{.EntityName}}Handler) Create(ctx fiber.Ctx) error {
	var req model.Create{{.EntityName}}Request
	if err := ctx.Bind().JSON(&req); err != nil {
		return ctx.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "无法解析请求体"})
	}

	// TODO: 在这里添加请求体验证逻辑 (e.g., using a validator library)

	resp, err := h.service.Create(&req)
	if err != nil {
		// TODO: 根据错误类型返回不同的状态码
		return ctx.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "创建失败"})
	}

	return ctx.Status(fiber.StatusCreated).JSON(resp)
}

// GetAll 处理获取所有 {{.EntityName}} 的请求
// @Summary      获取所有 {{.EntityName}}
// @Description  返回一个包含所有 {{.EntityName}} 记录的列表
// @Tags         {{.EntityName}}
// @Produce      json
// @Success      200  {array}   model.{{.EntityName}}Response
// @Failure      500  {object}  map[string]string
// @Router       /{{.TableName}} [get]
func (h *{{.EntityName}}Handler) GetAll(ctx fiber.Ctx) error {
	resp, err := h.service.GetAll()
	if err != nil {
		return ctx.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "获取列表失败"})
	}

	return ctx.Status(fiber.StatusOK).JSON(resp)
}

// GetByID 处理根据 ID 获取单个 {{.EntityName}} 的请求
// @Summary      根据 ID 获取 {{.EntityName}}
// @Description  返回与指定 ID 匹配的单个 {{.EntityName}} 记录
// @Tags         {{.EntityName}}
// @Produce      json
// @Param        id   path      {{.PrimaryKey.Type}}  true  "{{.EntityName}} ID"
// @Success      200  {object}  model.{{.EntityName}}Response
// @Failure      400  {object}  map[string]string
// @Failure      404  {object}  map[string]string
// @Failure      500  {object}  map[string]string
// @Router       /{{.TableName}}/{id} [get]
func (h *{{.EntityName}}Handler) GetByID(ctx fiber.Ctx) error {
	// 注意：这里的 ID 解析需要根据主键类型进行调整
	// 例如，如果主键是 uint 或 int，可以使用 ctx.ParamsInt("id")
	// 下面的示例适用于 string 类型的 ID
	id := ctx.Params("id")
	if id == "" {
		return ctx.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "ID 不能为空"})
	}

	// TODO: 将字符串 id 转换为 {{.PrimaryKey.Type}} 类型
	var convertedID {{.PrimaryKey.Type}} // = convert(id)

	resp, err := h.service.GetByID(convertedID)
	if err != nil {
		// TODO: 区分 "not found" 错误和其他服务器错误
		return ctx.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "记录未找到"})
	}

	return ctx.Status(fiber.StatusOK).JSON(resp)
}

// Update 处理更新 {{.EntityName}} 的请求
// @Summary      更新 {{.EntityName}}
// @Description  根据给定的 ID 和请求体更新一个已存在的 {{.EntityName}} 记录
// @Tags         {{.EntityName}}
// @Accept       json
// @Produce      json
// @Param        id   path      {{.PrimaryKey.Type}}  true  "{{.EntityName}} ID"
// @Param        request body model.Update{{.EntityName}}Request true "更新请求"
// @Success      200  {object}  model.{{.EntityName}}Response
// @Failure      400  {object}  map[string]string
// @Failure      404  {object}  map[string]string
// @Failure      500  {object}  map[string]string
// @Router       /{{.TableName}}/{id} [put]
func (h *{{.EntityName}}Handler) Update(ctx fiber.Ctx) error {
	id := ctx.Params("id")
	if id == "" {
		return ctx.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "ID 不能为空"})
	}

	var req model.Update{{.EntityName}}Request
	if err := ctx.Bind().JSON(&req); err != nil {
		return ctx.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "无法解析请求体"})
	}

	// TODO: 将字符串 id 转换为 {{.PrimaryKey.Type}} 类型
	var convertedID {{.PrimaryKey.Type}} // = convert(id)

	resp, err := h.service.Update(convertedID, &req)
	if err != nil {
		return ctx.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "更新失败"})
	}

	return ctx.Status(fiber.StatusOK).JSON(resp)
}

// Delete 处理删除 {{.EntityName}} 的请求
// @Summary      删除 {{.EntityName}}
// @Description  根据给定的 ID 删除一个 {{.EntityName}} 记录
// @Tags         {{.EntityName}}
// @Param        id   path      {{.PrimaryKey.Type}}  true  "{{.EntityName}} ID"
// @Success      204  {object}  nil
// @Failure      400  {object}  map[string]string
// @Failure      500  {object}  map[string]string
// @Router       /{{.TableName}}/{id} [delete]
func (h *{{.EntityName}}Handler) Delete(ctx fiber.Ctx) error {
	id := ctx.Params("id")
	if id == "" {
		return ctx.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "ID 不能为空"})
	}

	// TODO: 将字符串 id 转换为 {{.PrimaryKey.Type}} 类型
	var convertedID {{.PrimaryKey.Type}} // = convert(id)

	if err := h.service.Delete(convertedID); err != nil {
		return ctx.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "删除失败"})
	}

	return ctx.SendStatus(fiber.StatusNoContent)
}