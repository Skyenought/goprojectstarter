package repository

import (
	"fmt"
	"log"

	"{{.ProjectModule}}/internal/domain/entity"
	"{{.ProjectModule}}/internal/domain/ports"
	"gorm.io/gorm"
)

var _ ports.{{.EntityName}}Repository = (*{{.LowerEntityName}}RepositoryImpl)(nil)

type {{.LowerEntityName}}RepositoryImpl struct {
	db *gorm.DB
}

// New{{.EntityName}}Repository 创建一个新的 GORM {{.EntityName}} 仓库实现
func New{{.EntityName}}Repository(db *gorm.DB) ports.{{.EntityName}}Repository {
	if !db.Migrator().HasTable(&entity.{{.EntityName}}{}) {
		log.Printf("Table for '%s' not found, running AutoMigrate...", "{{.EntityName}}")

		err := db.AutoMigrate(&entity.{{.EntityName}}{})
		if err != nil {
			panic(fmt.Sprintf("Failed to auto-migrate table for {{.EntityName}}: %v", err))
		}
		log.Printf("Table for '%s' created successfully.", "{{.EntityName}}")
	}

	return &{{.LowerEntityName}}RepositoryImpl{db: db}
}

{{if not .NoCrudMethods}}
func (r *{{.LowerEntityName}}RepositoryImpl) Create(model *entity.{{.EntityName}}) error {
	return r.db.Create(model).Error
}

func (r *{{.LowerEntityName}}RepositoryImpl) FindAll() ([]entity.{{.EntityName}}, error) {
	var models []entity.{{.EntityName}}
	err := r.db.Find(&models).Error
	return models, err
}

func (r *{{.LowerEntityName}}RepositoryImpl) FindByID(id {{.PrimaryKey.Type}}) (*entity.{{.EntityName}}, error) {
	var model entity.{{.EntityName}}
	err := r.db.First(&model, "{{.PrimaryKey.GormName}} = ?", id).Error
	if err != nil {
		return nil, err
	}
	return &model, nil
}

func (r *{{.LowerEntityName}}RepositoryImpl) Update(model *entity.{{.EntityName}}) error {
	return r.db.Save(model).Error
}

func (r *{{.LowerEntityName}}RepositoryImpl) Delete(id {{.PrimaryKey.Type}}) error {
	return r.db.Delete(&entity.{{.EntityName}}{}, id).Error
}
{{else}}
/*
// ExampleMethod 是一个自定义方法的示例
func (r *{{.LowerEntityName}}RepositoryImpl) ExampleMethod(ctx context.Context, arg string) (string, error) {
	// 在这里实现你的自定义数据库逻辑
	return "示例返回", nil
}
*/
{{end}}