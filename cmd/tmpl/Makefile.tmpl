# Go parameters
GOCMD=go
GOBUILD=$(GOCMD) build
GOCLEAN=$(GOCMD) clean
GOTEST=$(GOCMD) test
GOGET=$(GOCMD) get

# Binary name
BINARY_NAME={{.AppName}}
BINARY_UNIX=$(BINARY_NAME)-linux

# Source files location
SRC_PATH=./cmd/{{.AppName}}/main.go

# Output directory for the binary
OUTPUT_DIR=./bin

# Default target executed when you just run "make"
all: build

# Build the binary for the current operating system
build:
	@echo "Building for current OS..."
	@mkdir -p $(OUTPUT_DIR)
	$(GOBUILD) -o $(OUTPUT_DIR)/$(BINARY_NAME) $(SRC_PATH)
	@echo "Build complete: $(OUTPUT_DIR)/$(BINARY_NAME)"

# Run the application with the default config file
run:
	@echo "Running the application..."
	$(GOBUILD) -o $(OUTPUT_DIR)/$(BINARY_NAME) $(SRC_PATH)
	@./$(OUTPUT_DIR)/$(BINARY_NAME) -c config.yaml

# Run tests
test:
	@echo "Running tests..."
	$(GOTEST) -v ./...

# Clean up build artifacts
clean:
	@echo "Cleaning up..."
	$(GOCLEAN)
	rm -rf $(OUTPUT_DIR)
	@echo "Cleanup complete."

# Cross-compile for Linux (amd64)
build-linux:
	@echo ">> Building for Linux (amd64)..."
	@mkdir -p $(OUTPUT_DIR)
	CGO_ENABLED=0 GOOS=linux GOARCH=amd64 $(GOBUILD) -o $(OUTPUT_DIR)/$(BINARY_UNIX) $(SRC_PATH)
	@echo ">> Build complete: $(OUTPUT_DIR)/$(BINARY_UNIX)"

# Declare targets that are not files
.PHONY: all build run test clean build-linux