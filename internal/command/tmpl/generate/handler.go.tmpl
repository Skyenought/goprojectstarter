package handler

import (
	"errors"
	"{{.ProjectModule}}/internal/application/service"
	"{{.ProjectModule}}/internal/interfaces/dto"
	"github.com/Skyenought/goprojectstarter/pkg/response" // 导入 response 包
	"github.com/gofiber/fiber/v3"
	"gorm.io/gorm"
)

// {{.EntityName}}Handler 封装了与 {{.EntityName}} 实体相关的 HTTP 处理器
type {{.EntityName}}Handler struct {
	service service.{{.EntityName}}Service
}

// New{{.EntityName}}Handler 创建一个新的 {{.EntityName}} 处理器
func New{{.EntityName}}Handler(s service.{{.EntityName}}Service) *{{.EntityName}}Handler {
	return &{{.EntityName}}Handler{service: s}
}

{{if not .NoCrudMethods}}
// Create 处理创建新 {{.EntityName}} 的请求
// @Summary      创建 {{.EntityName}}
// @Description  根据请求体创建一个新的 {{.EntityName}} 记录
// @Tags         {{.EntityName}}
// @Accept       json
// @Produce      json
// @Param        request body dto.Create{{.EntityName}}Request true "创建请求"
// @Success      201  {object}  map[string]interface{} "成功"
// @Failure      400  {object}  map[string]interface{} "请求错误"
// @Failure      500  {object}  map[string]interface{} "服务器错误"
// @Router       /{{.TableName}} [post]
func (h *{{.EntityName}}Handler) Create(ctx fiber.Ctx) error {
	var req dto.Create{{.EntityName}}Request
	if err := ctx.Bind().JSON(&req); err != nil {
		return response.FailFlat(ctx, response.CodeInvalidParams, "无法解析请求体")
	}

	// TODO: 在这里添加请求体验证逻辑 (e.g., using a validator library)

	resp, err := h.service.Create(ctx, &req)
	if err != nil {
		// TODO: 根据错误类型返回不同的状态码
		return response.FailFlat(ctx, response.CodeServerError, "创建失败")
	}

	return response.CreatedFlat(ctx, resp)
}

// GetAll 处理获取所有 {{.EntityName}} 的请求
// @Summary      获取所有 {{.EntityName}}
// @Description  返回一个包含所有 {{.EntityName}} 记录的列表
// @Tags         {{.EntityName}}
// @Produce      json
// @Success      200  {object}  map[string]interface{} "成功"
// @Failure      500  {object}  map[string]interface{} "服务器错误"
// @Router       /{{.TableName}} [get]
func (h *{{.EntityName}}Handler) GetAll(ctx fiber.Ctx) error {
	resp, err := h.service.GetAll(ctx)
	if err != nil {
		return response.FailFlat(ctx, response.CodeServerError, "获取列表失败")
	}

	return response.SuccessFlat(ctx, resp)
}

// GetByID 处理根据 ID 获取单个 {{.EntityName}} 的请求
// @Summary      根据 ID 获取 {{.EntityName}}
// @Description  返回与指定 ID 匹配的单个 {{.EntityName}} 记录
// @Tags         {{.EntityName}}
// @Produce      json
// @Param        id   path      {{.PrimaryKey.Type}}  true  "{{.EntityName}} ID"
// @Success      200  {object}  map[string]interface{} "成功"
// @Failure      400  {object}  map[string]interface{} "请求错误"
// @Failure      404  {object}  map[string]interface{} "未找到"
// @Failure      500  {object}  map[string]interface{} "服务器错误"
// @Router       /{{.TableName}}/{id} [get]
func (h *{{.EntityName}}Handler) GetByID(ctx fiber.Ctx) error {
	id := ctx.Params("id")
	if id == "" {
		return response.FailFlat(ctx, response.CodeInvalidParams, "ID 不能为空")
	}

	// TODO: 将字符串 id 转换为 {{.PrimaryKey.Type}} 类型. 例如:
	// convertedID, err := strconv.ParseUint(id, 10, 64)
	// if err != nil {
	// 	 return response.FailFlat(ctx, response.CodeInvalidParams, "无效的 ID 格式")
	// }
	var convertedID {{.PrimaryKey.Type}}

	resp, err := h.service.GetByID(ctx, convertedID)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return response.FailFlat(ctx, response.CodeNotFound, "记录未找到")
		}
		return response.FailFlat(ctx, response.CodeServerError, "获取失败")
	}

	return response.SuccessFlat(ctx, resp)
}

// Update 处理更新 {{.EntityName}} 的请求
// @Summary      更新 {{.EntityName}}
// @Description  根据给定的 ID 和请求体更新一个已存在的 {{.EntityName}} 记录
// @Tags         {{.EntityName}}
// @Accept       json
// @Produce      json
// @Param        id   path      {{.PrimaryKey.Type}}  true  "{{.EntityName}} ID"
// @Param        request body dto.Update{{.EntityName}}Request true "更新请求"
// @Success      200  {object}  map[string]interface{} "成功"
// @Failure      400  {object}  map[string]interface{} "请求错误"
// @Failure      404  {object}  map[string]interface{} "未找到"
// @Failure      500  {object}  map[string]interface{} "服务器错误"
// @Router       /{{.TableName}}/{id} [put]
func (h *{{.EntityName}}Handler) Update(ctx fiber.Ctx) error {
	id := ctx.Params("id")
	if id == "" {
		return response.FailFlat(ctx, response.CodeInvalidParams, "ID 不能为空")
	}

	var req dto.Update{{.EntityName}}Request
	if err := ctx.Bind().JSON(&req); err != nil {
		return response.FailFlat(ctx, response.CodeInvalidParams, "无法解析请求体")
	}

	// TODO: 将字符串 id 转换为 {{.PrimaryKey.Type}} 类型
	var convertedID {{.PrimaryKey.Type}}

	resp, err := h.service.Update(ctx, convertedID, &req)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return response.FailFlat(ctx, response.CodeNotFound, "记录未找到，无法更新")
		}
		return response.FailFlat(ctx, response.CodeServerError, "更新失败")
	}

	return response.SuccessFlat(ctx, resp)
}

// Delete 处理删除 {{.EntityName}} 的请求
// @Summary      删除 {{.EntityName}}
// @Description  根据给定的 ID 删除一个 {{.EntityName}} 记录
// @Tags         {{.EntityName}}
// @Param        id   path      {{.PrimaryKey.Type}}  true  "{{.EntityName}} ID"
// @Success      204  {object}  nil "无内容"
// @Failure      400  {object}  map[string]interface{} "请求错误"
// @Failure      404  {object}  map[string]interface{} "未找到"
// @Failure      500  {object}  map[string]interface{} "服务器错误"
// @Router       /{{.TableName}}/{id} [delete]
func (h *{{.EntityName}}Handler) Delete(ctx fiber.Ctx) error {
	id := ctx.Params("id")
	if id == "" {
		return response.FailFlat(ctx, response.CodeInvalidParams, "ID 不能为空")
	}

	// TODO: 将字符串 id 转换为 {{.PrimaryKey.Type}} 类型
	var convertedID {{.PrimaryKey.Type}}

	if err := h.service.Delete(ctx, convertedID); err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return response.FailFlat(ctx, response.CodeNotFound, "记录未找到，无法删除")
		}
		return response.FailFlat(ctx, response.CodeServerError, "删除失败")
	}

	return response.NoContent(ctx)
}
{{else}}
// ExampleMethod 是一个自定义处理器方法的示例
// @Summary      自定义操作示例
// @Description  这是一个自定义端点的说明
// @Tags         {{.EntityName}}
// @Accept       json
// @Produce      json
// @Param        id   path      {{.PrimaryKey.Type}}  true  "{{.EntityName}} ID"
// @Success      200  {object}  map[string]interface{}
// @Failure      400  {object}  map[string]interface{}
// @Router       /{{.TableName}}/{id}/example [post]
// func (h *{{.EntityName}}Handler) ExampleMethod(ctx fiber.Ctx) error {
// 	// 在这里可以调用服务层: h.service.ExampleMethod(ctx, ...)
// 	return response.SuccessFlat(ctx, fiber.Map{"message": "这是一个自定义端点"})
// }
{{end}}