package router

import (
	"github.com/Skyenought/goprojectstarter/pkg/fiberzap"
	"github.com/Skyenought/goprojectstarter/pkg/logger"
	"github.com/gofiber/fiber/v3"
	defaultLogger "github.com/gofiber/fiber/v3/middleware/logger"
	"go.uber.org/zap"
)

// Router 结构体用于接收依赖
type Router struct {
	App *fiber.App
	Log logger.Logger
}

// NewRouter 构造函数现在接收一个 logger.Logger 实例
func NewRouter(app *fiber.App, log logger.Logger) *Router {
	return &Router{
		App: app,
		Log: log,
	}
}

func (r *Router) SetupRoutes() {
	// 定义一个 zapLogger 接口，用于安全地获取底层的 *zap.Logger
	type zapLogger interface {
		Raw() *zap.Logger
	}

	// 检查注入的 logger 是否为 zap logger
	if z, ok := r.Log.(zapLogger); ok {
		r.App.Use(fiberzap.New(fiberzap.Config{
			Logger: z.Raw(),
		}))
		r.Log.Info("使用 Zap Logger 作为请求日志中间件")
	} else {
		r.App.Use(defaultLogger.New(defaultLogger.Config{
			DisableColors: true,
		}))
		r.Log.Info("使用 Fiber 默认 Logger 作为请求日志中间件")
	}

	r.App.Get("/health", func(c fiber.Ctx) error {
		r.Log.Info("健康检查被调用")
		return c.SendString("OK")
	})

	apiV1 := r.App.Group("/api/v1")

	// [GENERATOR ANCHOR] - Don't remove this comment!
}